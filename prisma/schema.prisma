// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model store {
  id String @id @default(uuid())
  name String 
  userId String
  billBoards billBoard[] @relation("storeTobillBoard")
  categories category[] @relation("storeToCategory")
  products product[] @relation("storeToProduct")
  sizes size[] @relation("storeToSize")
  colors color[] @relation("storeToColor")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model billBoard{
  id String @id @default(uuid())
  storeId String
  store store @relation("storeTobillBoard", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories category[] @relation("billBoardToCategory")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model category {
  id String @id @default (uuid())
  storeId String 
  store store @relation("storeToCategory",fields: [storeId], references: [id])
  billboardId String
  billBoard billBoard @relation("billBoardToCategory", fields: [billboardId], references: [id])
  name String
  products product[] @relation("categoryToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model size {
  id String @id @default(uuid())
  storeId String
  store store @relation("storeToSize", fields: [storeId], references: [id])
  name String
  value String
  products product[] @relation("sizeToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model color{
  id String @id @default(uuid())
  storeId String 
  store store @relation("storeToColor", fields: [storeId], references: [id])
  name String
  value String
  products product[] @relation("colorToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model product{
  id String @id @default(uuid())
  storeId String
  store store @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId String
  category category @relation("categoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size size @relation("sizeToProduct", fields: [sizeId], references: [id])
  colorId String
  color color @relation("colorToProduct", fields: [colorId], references: [id])
  images image[] @relation("imageToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model image {
  id String @id @default(uuid())
  productId String
  product product @relation("imageToProduct", fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
}